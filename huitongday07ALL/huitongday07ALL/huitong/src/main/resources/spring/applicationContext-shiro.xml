<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
				         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				         http://www.springframework.org/schema/context
				         http://www.springframework.org/schema/context/spring-context-3.0.xsd
				         http://www.springframework.org/schema/tx
				         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
				         http://www.springframework.org/schema/aop 
				         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	 
	 <!-- 将shiro的四大组件的生命周期 交给 spring框架管理 -->
	 <bean id="lifeCycleBeanProcessor" 
	 class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	 
	 <!-- 创建shiro的代理对象 
	 	 代理：在完成本职工作的同时，添加额外的操作
	 	 额外的操作：原材料realm的准备
	 	                       加密模块的匹配规则（MD5算法）
	                               权限的查询：根据当前登录的用户去查询数据库的权限模块
	  	 动态代理的两种模式：jdk的动态代理/ cglib的动态代理
	  -->
	 <bean 
	 class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
	 depends-on="lifeCycleBeanProcessor">
	 	<property name="proxyTargetClass" value="true"></property>
	 </bean>
	
	 <!-- 强制制定使用 cglib的代理模式
	      proxy-target-class="true"
	  -->
	 <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
  	
  	
	 <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	 	<!--引用 程序员编写的realm的原材料  -->
	 	<property name="realm" ref="AuthRealm"></property>
	 </bean>
	 <!-- 自己编写的处理原材料的程序 -->
	 <bean id="AuthRealm" class="cn.tarena.ht.shiro.AuthRealm">
		 <!-- 自定义的加密算法 ：引用bean标签
		 	  name="credentialsMatch" 与 
		 	  authCredential类的方法名对应
		  -->
		 <property name="credentialsMatcher" ref="authCredential"></property>
	 </bean>
	 <!-- 自定义的加密算法 -->
	 <bean id="authCredential" 
	 class="cn.tarena.ht.shiro.AuthCredential"></bean>
	 
	 <!-- 权限认证交给 shiro的安全中心管理   -->
	 <bean  class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	 	<property name="securityManager"  ref="securityManager"></property>
	 </bean>
	 
	<!-- shiro的过滤器
		所有的请求 都需要经过过滤器
		
	 -->
	 <bean id="shiroFilter"  class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	 	<!-- 引入shiro的安全管理中心 -->
	 	<property name="securityManager" ref="securityManager"></property>
	    <!-- 指定登录的地址  当用户没有登录时，默认跳转的页面 -->
	 	<property name="loginUrl" value="/index.jsp"></property>
	    <!-- 过滤链：values标签中配置的所有请求 -->
	 	<property name="filterChainDefinitions">
	 	<value>
	 		<!-- 
	 		     请求：  
	 		     静态的配置文件  放行 不拦截
		             动态的客户端的请求  拦截大部分请求，但是登录请求要拦截吗？
		    -->
	 	    <!-- 
	 			添加过滤信息
	 			1.anon 表示放行
	 			2.authc 表示拦截
	 		 -->
	 		/tologin.action = anon
	 		/logout.action = anon
	 		/login.action = anon
	 		/staticfile/** = anon
	 		<!-- /**拦截所有的请求和静态资源文件 -->
	 		/** = authc
	 	</value>
	 	</property>
	 </bean>
</beans> 